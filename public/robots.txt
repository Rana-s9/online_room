GitHubProjectでは1週間ずつissueを作りますが、週末に次週分のissueを１日単位で振り分けました。こうすることで現実的に実装可能かを判断しやすかったです。さらに、実装が終わると「issue名✅(2025/08/05/Tue)」のように日付を記録しました。こうして自分の実装速度を可視化し、次週の計画を１日に振り分けるときに活かしました。
思った通りに終わらず調整することもありましたが、細かく記録し予定を振り分けたことで
そのような時も冷静に進めることができました。

①うまくいかなかったことは、当初の納期日に間に合わず１週間半延長させていただいたことです。今後、重大な違反になり兼ねないと反省した点です。

②原因は、予想外の事態で時間が押すことを踏まえたスケジューリングが甘かったことです。また、フルコミットのため使える時間を過信していたことです。結果的に、急病で実装をできない期間があり、この期間がきっかけで納期に間に合わなくなってしまいました。
毎日休まず実装することを当たり前として予定を立てていましたが、このように予定外の事態が起きたときに対応できませんでした。
バッファーを多少設けていたにも関わらずこのようになってしまったことは、通常通り進んでもギリギリだった可能性を示していると思います。

③改善案の１つ目は、実装方法を悩む時間をできるだけ減らすために、事前に不安な点を調査しておくことです。軽くでも良いのでissueにメモしてあると、スムーズに開発に取り組みやすいです。改善案の２つ目は、通常の遅れに対するバッファーを設けるだけでなく、
予想外の事態が起きる可能性を踏まえたスケジュールにすることです。
特に長期の実装になると、小さな遅れが積み重なり、予想よりも遅れが膨らむことがあります。体力・集中力の面で見ても、一番効率の良い時間の使い方を考える方が目標への近道になることもあると考えました。
毎日時間が使えるとしても、持久力を考えて計画的に休みを挟むことも戦略としてよいのではないかと思いました。


機能の実装に関して、特にうまくいかない時や実装方法が分からない時に
自分で考えるよりも前に、"技術"のことばかり考えて闇雲に調べてしまうことで
逆に時間を使ってしまったことがありました。そういう時は、何のためにその機能を実装しているかを見失いがちで、時間管理もおざなりになっていました。

　そのため、「何のための機能なのか」を常に意識して自分で考えるようにしました。
主にissueの中に調べたことや実装の流れ、自分で考えたことをメモしました。書き直しが容易で、すぐに過去の実装を見返すこともできました。
特に本リリースまでの実装は長期戦だったので、「何をしてきたのか」「何をしているのか」「何を今後するのか」の全体を把握しておくことが大事だと考えていました。
これまでの実装で使ったDB、定義したメソッド、リレーションなどの背景は開発者が一番知っているので、今までの記述で使えるものがないか等を考えると
あっさり解決したり、やりたいことがシンプルになり簡単に実現できたことも多々ありました。
上記がやりやすいように、GithubProjectにメモを残したり、題名と実装日を記録したことでいつでも振り返れるようになっていました。
またGithubProjectを見て、今までの積み重ねを感じてモチベーション維持にも繋がりました。

①blender（外部ソフト）とthree.jsで３D表示
②Googleログイン
⓷Geocoder APIとGoogle Map APIで場所登録
⓸Geocoder APIとOpen Weather Map APIで天気情報取得・更新（入室時、自動でルームメイト全員の天気情報を更新且つ、30分以内に更新がない場合に更新するよう定義)


特に力を入れたのがblender（外部ソフト）とthree.jsによる３D表示・アニメーション再生です。技術検証でミニアプリを作った際に上記の練習をしましたが、ボタン押下でアニメーションが動いたり、１からモデルを作ったりと更なる工夫が必要でした。
上記の実装理由は、本アプリの主旨が遠距離恋愛をしている人や遠くにいる友人・家族間が「実際に一緒にいる感覚になる」ことだったからです。そのためには、ただ平面を見ている感覚になるのではなく、画面の中への没入感が必要でした。


特に力を入れたのがblender（外部ソフト）とthree.jsによる３D表示・アニメーション再生です。技術検証でミニアプリを作った際に上記の練習をしましたが、その際はボタン押下でアニメーションが動いたり、１からモデルを作ることはしておらず、今回は更なる工夫が必要でした。
上記の実装理由は、本アプリの主旨が遠距離恋愛をしている人や遠くにいる友人・家族間が「実際に一緒にいる感覚になる」ことだったからです。そのためには、ただ平面を見ている感覚になるのではなく、画面の中への没入感が必要でした。
その没入感を表現するには、視覚的に①リアルな描写であること②動きがあるもの⓷カーソル移動などで物や視点を動かせる（画面の中がコントロール下にあること）ことが重要だと考えました。（アニメや仮想空間で得られる没入感から、そう考えました。）
そこで、よりリアルな描写でモデル作成ができるblenderと、その３D情報をブラウザに表せるthree.jsを使い実装することにしました。

(使った技術の説明）
　外部ソフトblenderはカーテンやテーブル、椅子などあらゆる3Dモデルを１から作成できるソフトです。アニメーションを付けることもでき、本やドアが開く動作も表現できます。この時、3Dモデルやアニメーションはそれぞれ個々に名前（object1など）があるので、
名前の確認・変更をしておきます。この名前を使うと、three.jsで個々のモデルやアニメーションを指定できます。ブラウザ上に３D 空間を作り、上記モデルを表示してくれるのがthree.jsです。
（実装の流れ）
　①まず、今回はblenderで椅子、テーブル、本、ドア、カーテン、窓、ベッド、テレビ、棚、クッション、布団などの部屋で日常的に使う家具のモデルを１から作りました。
実際に遠距離恋愛をしている相手の部屋を参考にしたりして、よりリアルな生活感のある部屋を目標に作りました。本やドアが開くアニメーションも、ここでつけておきます。
　②blenderで作成した３Dモデル情報とアニメーションの情報を、three.jsに渡してブラウザに表示するには、３Dモデル等の情報を格納したglbファイルとして出力する必要があります。(部屋のglbファイルとドアのglbファイルの２つを別々に出力しました）
ここからglbファイルをアプリファイル配下に置き、three.jsのコードを書いていきます。
　⓷three.jsで、ライトと視点の設定をします。（ライトの設定がなければ、真っ暗の画面になります）ここからは、例としてボタン押下でドアが開くアニメーションの実装の流れを説明します。
ここで、jsファイルに主に以下の記述をします。
・glbファイルを読み込む記述
・モデルが表示されていることを確認
・ボタンid（ビューファイルのボタンにid=""の形で名前を付けておく）のクリック後に、
ドアモデル（blenderでつけた名前)のアニメーション（blenderでつけた名前）が動く記述
大まかに上記の流れになります。
　④他にも、three.jsで表示させるためのツールや、今回はモデルが多く重いglbファイル容量を圧縮(DRACO圧縮）したので、それを読み込むためのDRACOのツールなどを記述する必要がありました。

思い出しながら自分の言葉で書いたので、長くなりましたがまとめて
もっと詳細も説明できるように調べます。

実装の際に難しかったことは、情報の少ない技術や機能の組み合わせを使う時でした。そういう時は、やりたいことを一度言葉で整理して、大枠を調べたりしました。また、実装が後半になっていくにつれてDBやリレーション、メソッドが増えて、問題が起きたときに考えることが増えました。こうしたときに調べてみても、特有の開発環境が出来上がっており、そのまま実践するのでは解決できなくなりました。
この時、新たな情報を調べるのを一旦止めて、今までに書いたコード（モデルファイルやスキーマファイル、コントローラ）などのDBやリレーション、メソッドを読み直しました。
今までに書いた便利なコードが使えたり、カラムが足りなかったり、メソッドを使い間違えていたことがあり、常に少し前のことで良いので実装したことを把握し直すようにしました。




